[{"/Users/ErinsMac/Desktop/capstone-banking/frontend/src/index.js":"1","/Users/ErinsMac/Desktop/capstone-banking/frontend/src/App.js":"2","/Users/ErinsMac/Desktop/capstone-banking/frontend/src/components/useToken.js":"3","/Users/ErinsMac/Desktop/capstone-banking/frontend/src/components/Navbar.js":"4","/Users/ErinsMac/Desktop/capstone-banking/frontend/src/components/withdraw.js":"5","/Users/ErinsMac/Desktop/capstone-banking/frontend/src/components/login.js":"6","/Users/ErinsMac/Desktop/capstone-banking/frontend/src/components/home.js":"7","/Users/ErinsMac/Desktop/capstone-banking/frontend/src/components/deposit.js":"8","/Users/ErinsMac/Desktop/capstone-banking/frontend/src/components/logout.js":"9","/Users/ErinsMac/Desktop/capstone-banking/frontend/src/components/changePwd.js":"10"},{"size":267,"mtime":1636916529220,"results":"11","hashOfConfig":"12"},{"size":2238,"mtime":1636916529214,"results":"13","hashOfConfig":"12"},{"size":424,"mtime":1636916529219,"results":"14","hashOfConfig":"12"},{"size":1782,"mtime":1636916529215,"results":"15","hashOfConfig":"12"},{"size":3153,"mtime":1636916529220,"results":"16","hashOfConfig":"12"},{"size":6699,"mtime":1636916529219,"results":"17","hashOfConfig":"12"},{"size":2398,"mtime":1636916529218,"results":"18","hashOfConfig":"12"},{"size":2716,"mtime":1636916529218,"results":"19","hashOfConfig":"12"},{"size":1275,"mtime":1636916529219,"results":"20","hashOfConfig":"12"},{"size":2746,"mtime":1636921760700,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"cmmt75",{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/ErinsMac/Desktop/capstone-banking/frontend/src/index.js",[],["47","48"],"/Users/ErinsMac/Desktop/capstone-banking/frontend/src/App.js",[],"/Users/ErinsMac/Desktop/capstone-banking/frontend/src/components/useToken.js",[],"/Users/ErinsMac/Desktop/capstone-banking/frontend/src/components/Navbar.js",[],"/Users/ErinsMac/Desktop/capstone-banking/frontend/src/components/withdraw.js",["49"],"import {React, useState, useContext } from 'react';\nimport { Card, Form, Button, InputGroup } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { DataContext } from \"../App.js\"\nimport \"./home.css\";\n\nfunction Withdraw() {\n  const [withdrawal, setWithdrawal] = useState(0);\n  const [isValid, setIsValid] = useState(false);\n  const [balance, setBalance] = useState('0');\n\n  //-----------------------------------------------\n  let user = JSON.parse(window.localStorage.getItem('user'));\n  let userbalance = user.balance;\n  let email = user.email;\n  console.log(userbalance + \" userbalance\");\n  //-------------------------------------------------\n\n  const ctx = useContext(DataContext);\n\n  ctx.balance = userbalance;\n  let status = ctx.balance;\n\n  const handleChange = e => {\n    setIsValid(true);\n    setWithdrawal(e.target.value);\n  };\n\n  async function updateDB(credentials){\n    const result = await fetch('/api/withdraw', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    })\n      .then(data => data.json())\n  }\n\n  const handleSubmit = async e => {\n\n    if (isNaN(withdrawal)) {\n      alert(\"Please enter valid number to withdraw, cannot include non-number values.\")\n      setWithdrawal(0);\n      setIsValid(false);\n      return;\n    }\n    \n    if (withdrawal < 0) {\n      alert(\"Please enter valid number to withdraw, cannot include negative numbers.\");\n      setWithdrawal(0);\n      setIsValid(false);\n      return;\n    }\n\n    if (withdrawal > status) {\n      alert(\"Withdraw amount cannot exceed account balance.\")\n    }\n    else{\n\n      ctx.updateBalance(withdrawal, \"MINUS\");\n      e.preventDefault();\n\n      var newBalance = parseInt(balance) - parseInt(withdrawal);\n      setBalance(newBalance.toString());\n\n      status = ctx.balance;\n      console.log(status);\n      alert('Your withdraw was successful. Account Balance is now: $' + ctx.balance);\n\n      user['balance']=ctx.balance;\n      localStorage.setItem('user', JSON.stringify(user));\n      \n      e.preventDefault();\n      console.log(\"balance \"+ status + \" email \" + email);\n      updateDB({\n        email,\n        status\n      });\n    }\n  };\n\n  return (\n    <Card\n      bgcolor=\"primary\"\n      header=\"Withdraw\"\n      status={status}\n    >\n\n      <Card.Img src=\"./bank.jpg\" alt=\"Banking image\" />\n      <Card.ImgOverlay>\n        <div className=\"money-card\">\n        <Card.Header> Withdraw </Card.Header>\n        <Card.Body>\n          <Form onSubmit={handleSubmit}>\n            <Form.Group className=\"mb-3\" controlId=\"withdraw amount\">\n              <h3> Account Balance: $ {status} </h3>\n              <Form.Label> Please enter the amount you would like to withdraw. </Form.Label>\n              <InputGroup>\n                <Form.Control type=\"number\" placeholder=\"$0\" min=\"0\" onChange={handleChange} />\n              </InputGroup>\n            </Form.Group>\n            <Button as=\"input\" type=\"submit\" disabled={!isValid} value=\"Make Withdraw\"/>\n          </Form>\n        </Card.Body>\n        </div>\n      </Card.ImgOverlay>\n    </Card>\n  );\n}\n\nexport default Withdraw;","/Users/ErinsMac/Desktop/capstone-banking/frontend/src/components/login.js",["50","51"],"import React, { useState } from 'react';\r\nimport { Card, Form, Button, InputGroup } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport PropTypes from 'prop-types';\r\nimport \"./home.css\";\r\nimport { DataContext } from \"../App.js\"\r\n\r\nasync function loginUser(credentials){\r\n  const result= await fetch('/api/login', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(credentials)\r\n    })\r\n      .then(data => data.json())\r\n      .then(user => user)\r\n  const user = result.user;\r\n\r\n  if(result.status === 'ok') {\r\n    console.log('Got the token: ', result.data)\r\n    console.log('Got user: ', result.user)\r\n\t\talert('You have successfully logged in')\r\n    const token = result.data;\r\n    localStorage.setItem(\"user\", JSON.stringify(result.user));\r\n    return token; \r\n    //window.location.href = window.location + \"home\"\r\n  }\r\n}\r\n\r\nasync function signupUser(credentials){\r\n  const result = await fetch('/api/signup', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify(credentials)\r\n  })\r\n    .then(data => data.json())\r\n\r\n  if (result.status === 'ok') {\r\n    alert('You have successfully created an account');\r\n    window.location.reload();\r\n    alert('Please login to your newly created account');\r\n  } \r\n  else {\r\n    alert(result.error)\r\n  }\r\n}\r\n\r\nexport default function Login({ setToken }) {\r\n  const [email, setEmail] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [name, setName] = useState();\r\n  const balance = 0;\r\n  \r\n  const handleSubmitLogin = async e => {\r\n    e.preventDefault();\r\n    console.log(\"clicked login in\");\r\n    const token = await loginUser({\r\n      email,\r\n      password\r\n    });\r\n\r\n    if (token !== undefined){\r\n    setToken(token);\r\n    console.log(token)\r\n    window.location.reload()\r\n    }\r\n    else alert(\"invalid email or password, please try again or create an account\")\r\n  }\r\n\r\n  const handleSubmitSignup = async e => {\r\n    e.preventDefault();\r\n    console.log(\"clicked signed up\");\r\n    signupUser({\r\n      name,\r\n      email,\r\n      password,\r\n      balance\r\n    });\r\n  }\r\n  return (\r\n      <Card\r\n        bgcolor=\"primary\"\r\n        header=\"Login\"\r\n      >\r\n          \r\n          <Card.Img src=\"./bank.jpg\" alt=\"Banking image\" />\r\n          <Card.ImgOverlay>\r\n            <Card.Title className=\"title\">Welcome To BadBank</Card.Title>\r\n              <Card.Text className=\"text\">\r\n                Let us help you with all your banking needs!\r\n              </Card.Text>\r\n\r\n              <div className=\"spacer\">\r\n                <br></br>\r\n                <br></br>\r\n              </div>\r\n\r\n            <div className=\"container-login\">\r\n\r\n              <Card.Header> Login </Card.Header>\r\n                <Card.Body>\r\n                  <Form className=\"acc-form\" onSubmit={handleSubmitLogin}>\r\n                    <Form.Group className=\"mb-3-email\">\r\n                      <Form.Label> Email address </Form.Label>\r\n                      <InputGroup>\r\n                        <Form.Control \r\n                            type=\"email\"\r\n                            placeholder=\"email@address.com\"\r\n                            required\r\n                            id=\"email\"\r\n                            onChange={e=> setEmail(e.target.value)}\r\n                        />\r\n                      </InputGroup>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group className=\"mb-3-password\">\r\n                      <Form.Label>Password</Form.Label>\r\n                      <InputGroup>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder=\"password\"\r\n                            required\r\n                            id=\"password\"\r\n                            onChange={e=> setPassword(e.target.value)}\r\n                        />\r\n                      </InputGroup>\r\n                    </Form.Group>\r\n\r\n                    <Button as=\"input\" type=\"submit\" value=\"Login\"/>\r\n                  </Form>    \r\n                </Card.Body>\r\n            </div>\r\n                \r\n            <div className=\"spacer\">\r\n                <br></br>\r\n            </div>\r\n            \r\n            <div className=\"container-create\">\r\n                <Card.Header> Create An Account </Card.Header>\r\n                <Card.Body>\r\n                <Form className=\"acc-form\" onSubmit={handleSubmitSignup}>\r\n                    <Form.Group className=\"mb-3-name\">\r\n                        <Form.Label className=\"name-label\">Enter Full Name</Form.Label>\r\n                        <InputGroup>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                placeholder=\"Enter Name\"\r\n                                required\r\n                                id=\"name\"\r\n                                onChange={e=> setName(e.target.value)}\r\n                            />\r\n                        </InputGroup>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group className=\"mb-3-email\">\r\n                        <Form.Label> Email address </Form.Label>\r\n                        <InputGroup>\r\n                            <Form.Control \r\n                                type=\"email\"\r\n                                placeholder=\"email@address.com\"\r\n                                required\r\n                                id=\"email\"\r\n                                onChange={e=> setEmail(e.target.value)}\r\n                            />\r\n                        </InputGroup>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group className=\"mb-3-password\">\r\n                        <Form.Label>Password</Form.Label>\r\n                        <InputGroup>\r\n                            <Form.Control\r\n                                type=\"password\"\r\n                                placeholder=\"password\"\r\n                                required\r\n                                id=\"password\"\r\n                                onChange={e=> setPassword(e.target.value)}\r\n                            />\r\n                        </InputGroup>\r\n                        <Form.Text className=\"text-muted\">\r\n                            Password must contain at least 8 characters.\r\n                        </Form.Text>\r\n                    </Form.Group>\r\n\r\n                    <Button as=\"input\" type=\"submit\" value=\"Create Account\"/>\r\n                </Form>\r\n                </Card.Body>\r\n            </div>\r\n          </Card.ImgOverlay> \r\n      </Card> \r\n  );\r\n};\r\n\r\nLogin.propTypes = {\r\n    setToken: PropTypes.func.isRequired\r\n}","/Users/ErinsMac/Desktop/capstone-banking/frontend/src/components/home.js",["52"],"import { Card, Button } from 'react-bootstrap';\nimport React from 'react';\nimport \"./home.css\";\n\nfunction Home(){\n    const user = JSON.parse(window.localStorage.getItem('user'));\n    const name = user.name;\n    const email = user.email;\n    const balance = user.balance;\n\n    async function deleteAccount(credentials){\n        const result = await fetch('/api/home', {\n          method: 'DELETE',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(credentials)\n        })\n          .then(data => data.json())\n    }\n\n    const onSubmit = async e => {\n        \n        let closeAccount = prompt(\"This will permanently delete your account. Type YES to confirm.\");\n        if (closeAccount === 'YES'){\n            console.log(\"delete\");\n            \n            e.preventDefault();\n            deleteAccount({ email });\n\n            sessionStorage.removeItem('token');\n            localStorage.removeItem('user');\n            window.location.reload()\n            window.location.href = \"/\";\n        }\n    }\n\n    const onSubmitpassword = async e => {\n        \n            console.log(\"reset\");\n            e.preventDefault();\n            window.location.href = window.location + \"changePwd\"\n            \n    }\n\n    return (\n        \n        <Card className=\"bg-dark text-white\" border=\"light\" >\n            <Card.Img src=\"./bank.jpg\" alt=\"Banking image\" />\n            <Card.ImgOverlay>\n                <Card.Title className=\"title\">Welcome To BadBank</Card.Title>\n                <Card.Text className=\"text\">\n                    Thank you for trusting us with your banking needs!\n                </Card.Text>\n                <div className=\"user-home\">\n                    <Card.Text>\n                        Username: {name} \n                    </Card.Text>\n                    <Card.Text>\n                        Balance: ${balance}\n                    </Card.Text>\n                    <Card.Text>\n                        <div>\n                            <Button onClick={onSubmitpassword}>Reset password</Button>\n                        </div>\n                        <div>\n                            <Button onClick={onSubmit}>Permanently close this Account.</Button>\n                        </div>\n                    </Card.Text>\n                </div>\n            </Card.ImgOverlay>\n        </Card>\n\n    );\n}\n\nexport default Home;","/Users/ErinsMac/Desktop/capstone-banking/frontend/src/components/deposit.js",["53","54"],"import React, { useState, useContext } from 'react';\nimport { Card, Form, Button, InputGroup } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { DataContext } from \"../App.js\"\n\nfunction Deposit() {\n\n  const [deposit, setDeposit] = useState(0);\n  const [isValid, setIsValid] = useState(false);\n  const [balance, setBalance] = useState('0');\n\n  //-----------------------------------------------\n  let user = JSON.parse(window.localStorage.getItem('user'));\n    let userbalance = user.balance;\n    let email = user.email;\n    console.log(userbalance + \" userbalance\");\n  //-------------------------------------------------\n  \n  const ctx = useContext(DataContext);\n  \n  ctx.balance = userbalance;\n  let status = ctx.balance;\n\n  const handleChange = e => {\n    setIsValid(true);\n    setDeposit(e.target.value);\n  };\n\n  async function updateDB(credentials){\n    const result = await fetch('/api/deposit', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    })\n      .then(data => data.json())\n  }\n\n  const handleSubmit = async e => {\n    \n    if (deposit == 0) {\n      alert(\"Please enter how much you would like to deposit\");\n      setDeposit(0);\n      setIsValid(false);\n      return;\n    }\n    \n    ctx.updateBalance(deposit, \"ADD\")\n    e.preventDefault();\n\n    var newBalance = parseInt(balance) + parseInt(deposit);\n    setBalance(newBalance.toString());\n\n    status = ctx.balance;\n    console.log(status);\n\n    alert('Deposit was a success! Account Balance is now: $' + ctx.balance);\n    user['balance']=ctx.balance;\n    localStorage.setItem('user', JSON.stringify(user));\n\n    e.preventDefault();\n    console.log(\"balance \"+ status + \" email \" + email);\n    updateDB({\n      email,\n      status\n    });\n  };\n\n  return (\n\n    <Card\n      bgcolor=\"primary\"\n      header=\"Deposit\"\n    >\n      <Card.Img src=\"./bank.jpg\" alt=\"Banking image\" />\n      <Card.ImgOverlay>\n      <div className=\"money-card\">\n        <Card.Header> Deposit </Card.Header>\n        <Card.Body>\n          <Form onSubmit={handleSubmit}>\n            <Form.Group className=\"mb-3\" controlId=\"deposit amount\">\n            <h3> Account Balance: $ {status} </h3>\n              <Form.Label> Please enter the amount you would like to deposit. </Form.Label>\n              <InputGroup>\n                <Form.Control type=\"number\" placeholder=\"$0\" min=\"0\" onChange={handleChange} />\n              </InputGroup>\n            </Form.Group>\n            <Button as=\"input\" type=\"submit\" disabled={!isValid} value=\"Deposit\"/>\n          </Form>\n        </Card.Body>\n        </div>\n      </Card.ImgOverlay>\n    </Card>\n  );\n}\n\nexport default Deposit;","/Users/ErinsMac/Desktop/capstone-banking/frontend/src/components/logout.js",[],"/Users/ErinsMac/Desktop/capstone-banking/frontend/src/components/changePwd.js",["55"],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":30,"column":11,"nodeType":"62","messageId":"63","endLine":30,"endColumn":17},{"ruleId":"60","severity":1,"message":"64","line":6,"column":10,"nodeType":"62","messageId":"63","endLine":6,"endColumn":21},{"ruleId":"60","severity":1,"message":"65","line":18,"column":9,"nodeType":"62","messageId":"63","endLine":18,"endColumn":13},{"ruleId":"60","severity":1,"message":"61","line":12,"column":15,"nodeType":"62","messageId":"63","endLine":12,"endColumn":21},{"ruleId":"60","severity":1,"message":"61","line":30,"column":11,"nodeType":"62","messageId":"63","endLine":30,"endColumn":17},{"ruleId":"66","severity":1,"message":"67","line":42,"column":17,"nodeType":"68","messageId":"69","endLine":42,"endColumn":19},{"ruleId":"60","severity":1,"message":"61","line":6,"column":11,"nodeType":"62","messageId":"63","endLine":6,"endColumn":17},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"no-unused-vars","'result' is assigned a value but never used.","Identifier","unusedVar","'DataContext' is defined but never used.","'user' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]